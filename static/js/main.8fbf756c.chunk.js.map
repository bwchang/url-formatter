{"version":3,"sources":["urlInput.js","parameterEditor.js","index.js"],"names":["UrlInput","props","onTextChange","e","setState","url","target","value","onSubmit","state","split","length","splitParam","query","obj","reduce","memo","param","error","Object","keys","alert","Alert","variant","this","className","htmlFor","id","rows","onChange","Button","size","block","disabled","onClick","React","Component","ParameterEditor","newParams","params","paramString","firstParam","each","key","concat","showConvertedUrl","convertedUrl","assign","map","readOnly","Form","Control","type","Table","renderTable","onCancel","renderConvertedUrl","Formatter","onUrlSubmit","urlSubmitted","onEditorSubmit","onEditorCancel","urlInput","parameterEditor","ReactDOM","render","document","getElementById"],"mappings":"+QAKaA,EAAb,kDACC,WAAYC,GAAQ,IAAD,8BAClB,gBAIDC,aAAe,SAACC,GACf,EAAKC,SAAS,CAAEC,IAAKF,EAAEG,OAAOC,SANZ,EASnBC,SAAW,WACV,GAAyC,IAArC,EAAKC,MAAMJ,IAAIK,MAAM,KAAKC,OAA9B,CAIA,IACIC,EADEC,EAAQ,EAAKJ,MAAMJ,IAAIK,MAAM,KAAK,GAElCI,EAAMC,YAAOF,EAAMH,MAAM,MAAM,SAACM,EAAMC,GAE3C,GAA0B,KAD1BL,EAAaK,EAAMP,MAAM,MACVC,OAAf,CAIA,GAAKC,EAAW,IAAOA,EAAW,GAKlC,OADAI,EAAKJ,EAAW,IAAMA,EAAW,GAC1BI,EAJN,EAAKZ,SAAS,CAAEc,MAAO,kEAJvB,EAAKd,SAAS,CAAEc,MAAO,mFAStB,IACEJ,GAAmC,IAA5BK,OAAOC,KAAKN,GAAKH,OAI7B,EAAKV,MAAMO,SAASM,EAAK,EAAKL,MAAMJ,IAAIK,MAAM,KAAK,IAHlD,EAAKN,SAAS,CAAEc,MAAO,wDAnBvB,EAAKd,SAAS,CAAEc,MAAO,mEATxB,EAAKT,MAAQ,CAAEJ,IAAK,IAFF,EADpB,qDAsCI,IAAMgB,EAAS,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAWC,KAAKf,MAAMS,OACpD,OAAQ,yBAAKO,UAAU,YACnBD,KAAKf,MAAMS,OAASG,EACtB,yBAAKI,UAAU,cACb,2BAAOC,QAAQ,YAAf,mBAAiD,6BACjD,8BAAUD,UAAU,eAAeE,GAAG,WAAWC,KAAK,KAAKC,SAAWL,KAAKtB,gBAE7E,kBAAC4B,EAAA,EAAD,CAAQP,QAAQ,UAAUQ,KAAK,KAAKC,OAAK,EAACC,UAAYT,KAAKf,MAAMJ,IAAM6B,QAAUV,KAAKhB,UAAtF,eA7CN,GAA8B2B,IAAMC,W,wBCCvBC,EAAb,kDACC,WAAYpC,GAAQ,IAAD,8BAClB,gBAIA4B,SAAW,SAAC1B,GACV,IAAMmC,EAAS,eAAQ,EAAK7B,MAAM8B,QAClCD,EAAUnC,EAAEG,OAAOqB,IAAMxB,EAAEG,OAAOC,MAClC,EAAKH,SAAS,CAAEmC,OAAQD,KARR,EAWlB9B,SAAW,WACT,IAEIgC,EAFAnC,EAAM,EAAKJ,MAAMI,IAAM,EAAKJ,MAAMI,IAAM,GACxCoC,GAAa,EAEjBC,YAAK,EAAKjC,MAAM8B,QAAQ,SAAChC,EAAOoC,GAC1BF,GACFD,EAAW,UAAMG,EAAN,YAAapC,GACxBkC,GAAa,GAEbD,EAAW,WAAOG,EAAP,YAAcpC,GAE3BF,EAAMA,EAAIuC,OAAOJ,MAEnB,EAAKpC,SAAS,CAAEyC,kBAAkB,EAAMC,aAAczC,KAtBxD,EAAKI,MAAQ,CAAE8B,OAAQpB,OAAO4B,OAAO,GAAI9C,EAAMsC,QAASM,kBAAkB,GAFxD,EADpB,0DA4BiB,IAAD,OACNjB,EAAOoB,YAAIxB,KAAKf,MAAM8B,QAAQ,SAAChC,EAAOoC,GAC1C,OACE,wBAAIA,IAAG,UAAMA,EAAN,SACL,4BAAI,8BAAUlB,UAAU,2BAA2BwB,UAAQ,EAAC1C,MAAQoC,KACpE,4BAAI,kBAACO,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOzB,GAAKgB,EAAMpC,MAAQA,EAAQsB,SAAW,EAAKA,gBAI/E,OACE,kBAACwB,EAAA,EAAD,KACE,+BACE,4BACE,mCACA,uCAGJ,+BAASzB,MA7CjB,2CAmDI,OACE,yBAAKD,GAAG,gBACN,6BAAOH,KAAKf,MAAMqC,iBArD1B,+BA2DE,OAAQ,yBAAKrB,UAAU,mBACjBD,KAAK8B,cACP,yBAAK3B,GAAG,mCACN,kBAACG,EAAA,EAAD,CAAQH,GAAG,8BAA8BJ,QAAQ,YAAYQ,KAAK,KAAKG,QAAUV,KAAKvB,MAAMsD,UAA5F,WACA,kBAACzB,EAAA,EAAD,CAAQH,GAAG,8BAA8BJ,QAAQ,UAAUQ,KAAK,KAAKG,QAAUV,KAAKhB,UAApF,YAEAgB,KAAKf,MAAMoC,kBAAoBrB,KAAKgC,0BAjE5C,GAAqCrB,IAAMC,WCErCqB,E,kDACL,WAAYxD,GAAQ,IAAD,8BAClB,gBAIDyD,YAAc,SAACnB,EAAQlC,GACtB,EAAKD,SAAS,CAAEuD,cAAc,EAAMpB,SAAQlC,SAN1B,EASlBuD,eAAiB,aATC,EAYlBC,eAAiB,WACf,EAAKzD,SAAS,CAAEuD,cAAc,KAXhC,EAAKlD,MAAQ,CAAEkD,cAAc,GAFX,E,qDAiBhB,IAAMG,EAAY,kBAAC,EAAD,CAAUtD,SAAWgB,KAAKkC,cACpCK,EAAmB,kBAAC,EAAD,CAAiBxB,OAASf,KAAKf,MAAM8B,OAASlC,IAAMmB,KAAKf,MAAMJ,IAAMkD,SAAW/B,KAAKqC,iBAE/G,OACG,yBAAKpC,UAAU,aACb,kDACED,KAAKf,MAAMkD,aAAeI,EAAkBD,O,GAxBhC3B,IAAMC,WAgC9B4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8fbf756c.chunk.js","sourcesContent":["import React from 'react';\n\nimport { reduce } from \"underscore\";\nimport { Button, Alert } from 'react-bootstrap';\n\nexport class UrlInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = { url: \"\" }\n\t}\n\n\tonTextChange = (e) => {\n\t\tthis.setState({ url: e.target.value })\n\t};\n\n\tonSubmit = () => {\n\t\tif (this.state.url.split(\"?\").length !== 2) {\n\t\t\tthis.setState({ error: \"Invalid URL: expecting exactly 1 ? at the start of the query.\" });\n\t\t\treturn;\n\t\t}\n\t\tconst query = this.state.url.split(\"?\")[1]\n\t\tvar splitParam;\n\t\tconst obj = reduce(query.split(\"&\"), (memo, param) => {\n\t\t\tsplitParam = param.split(\"=\");\n\t\t\tif (splitParam.length !== 2) {\n\t\t\t\tthis.setState({ error: \"Invalid URL: expecting each parameter to be a key value pair separated by =.\" });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!splitParam[0] || !splitParam[1]) {\n\t\t\t\tthis.setState({ error: \"Invalid URL: expecting each key and value to be present.\" });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmemo[splitParam[0]] = splitParam[1];\n\t\t\treturn memo;\n\t\t}, {});\n\t\tif (!obj || Object.keys(obj).length === 0) {\n\t\t\tthis.setState({ error: \"Invalid URL: expecting at least one parameter.\" });\n\t\t\treturn;\n\t\t}\n\t\tthis.props.onSubmit(obj, this.state.url.split(\"?\")[0]);\n\t}\n\n  render() {\n    const alert = (<Alert variant=\"danger\">{ this.state.error }</Alert>);\n    return (<div className=\"urlInput\">\n      { this.state.error && alert }\n      <div className=\"form-group\">\n        <label htmlFor=\"inputUrl\">Paste URL here:</label><br/>\n        <textarea className=\"form-control\" id=\"inputUrl\" rows=\"12\" onChange={ this.onTextChange } />\n      </div>\n      <Button variant=\"primary\" size=\"lg\" block disabled={ !this.state.url } onClick={ this.onSubmit }>Submit</Button>\n    </div>);\n\t}\n}\n","import React from 'react';\n\nimport { map, each } from \"underscore\";\n\nimport { Table, Form, Button } from 'react-bootstrap';\n\nexport class ParameterEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = { params: Object.assign({}, props.params), showConvertedUrl: false }\n\t}\n\n  onChange = (e) => {\n    const newParams = { ...this.state.params };\n    newParams[e.target.id] = e.target.value;\n    this.setState({ params: newParams });\n  };\n\n  onSubmit = () => {\n    var url = this.props.url ? this.props.url : \"\";\n    var firstParam = true;\n    var paramString;\n    each(this.state.params, (value, key) => {\n      if (firstParam) {\n        paramString = `${key}=${value}`;\n        firstParam = false;\n      } else {\n        paramString = `&${key}=${value}`;\n      }\n      url = url.concat(paramString);\n    });\n    this.setState({ showConvertedUrl: true, convertedUrl: url });\n  };\n\n  renderTable() {\n    const rows = map(this.state.params, (value, key) => {\n      return (\n        <tr key={ `${key}_row` }>\n          <td><textarea className=\"parameterEditorKeyColumn\" readOnly value={ key } /></td>\n          <td><Form.Control type=\"text\" id={ key } value={ value } onChange={ this.onChange } /></td>\n        </tr>\n      );\n    });\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <th>Key</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>{ rows }</tbody>\n      </Table>\n    );\n  }\n\n  renderConvertedUrl() {\n    return (\n      <div id=\"convertedUrl\">\n        <div>{ this.state.convertedUrl }</div>\n      </div>\n    );\n  }\n\n\trender() {\n\t\treturn (<div className=\"parameterEditor\">\n      { this.renderTable() }\n      <div id=\"parameterEditorButtonsContainer\">\n        <Button id=\"parameterEditorCancelButton\" variant=\"secondary\" size=\"lg\" onClick={ this.props.onCancel }>Go Back</Button>\n        <Button id=\"parameterEditorSubmitButton\" variant=\"primary\" size=\"lg\" onClick={ this.onSubmit }>Convert</Button>\n      </div>\n      { this.state.showConvertedUrl && this.renderConvertedUrl() }\n    </div>);\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { UrlInput } from \"./urlInput\";\nimport { ParameterEditor } from \"./parameterEditor\";\n\nclass Formatter extends React.Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = { urlSubmitted: false }\n\t}\n\n\tonUrlSubmit = (params, url) => {\n\t\tthis.setState({ urlSubmitted: true, params, url })\n\t};\n\n  onEditorSubmit = () => {\n  };\n\n  onEditorCancel = () => {\n    this.setState({ urlSubmitted: false })\n  };\n\n  \trender() {\n  \t\tconst urlInput = (<UrlInput onSubmit={ this.onUrlSubmit }/>);\n      const parameterEditor = (<ParameterEditor params={ this.state.params } url={ this.state.url } onCancel={ this.onEditorCancel } />);\n\n    \treturn (\n        <div className=\"formatter\">\n          <h1>not a tag splitter</h1>\n          { this.state.urlSubmitted ? parameterEditor : urlInput }\n        </div>\n      );\n  \t}\n}\n\n// ========================================\n\nReactDOM.render(\n  <Formatter />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}